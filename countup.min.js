class CountUp {
    constructor(target, endVal, options = {}) {
        this.target = document.getElementById(target);
        this.startVal = 0;
        this.endVal = endVal;
        this.decimals = options.decimals || 0;
        this.duration = options.duration || 2;
        this.useEasing = options.useEasing || true;
        this.separator = options.separator || '';
        this.decimal = options.decimal || '.';
        this.easingFn = this.linearEasing;
        if (this.useEasing) {
            this.easingFn = this.easeOutExpo;
        }
        this.startTime = null;
        this.time = null;
        this.requestId = null;
        this.count();
    }

    count(timestamp) {
        if (!this.startTime) this.startTime = timestamp;
        this.time = timestamp - this.startTime;
        this.update(this.easingFn(this.time, this.startVal, this.endVal - this.startVal, this.duration * 1000));
        if (this.time < this.duration * 1000) {
            this.requestId = requestAnimationFrame(this.count.bind(this));
        } else {
            this.update(this.endVal);
            if (this.requestId) {
                cancelAnimationFrame(this.requestId);
            }
        }
    }

    update(val) {
        const formatted = this.formatNumber(val);
        this.target.textContent = formatted;
    }

    formatNumber(num) {
        const fixed = num.toFixed(this.decimals);
        const parts = fixed.split('.');
        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, this.separator);
        return parts.join(this.decimal);
    }

    linearEasing(t, b, c, d) {
        return c * t / d + b;
    }

    easeOutExpo(t, b, c, d) {
        return c * (-Math.pow(2, -10 * t / d) + 1) + b;
    }
}

